{"ast":null,"code":"var _jsxFileName = \"C:\\\\MyFiles\\\\Lboot_successhires_old_versions\\\\successhires_servercode\\\\src\\\\layouts\\\\Admin.jsx\";\nimport React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport NotificationSystem from \"react-notification-system\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\nimport Footer from \"components/Footer/Footer\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport { style } from \"variables/Variables.jsx\";\nimport routes from \"routes.js\";\nimport Cookies from 'universal-cookie';\nimport userImage from \"assets/img/brand/blue.png\";\nimport { browserHistory } from 'react-router';\nimport AdminFooter from \"components/Footer/Footer.jsx\";\nimport image from \"assets/img/brand/blue.png\";\nimport { Container } from \"reactstrap\";\n\nconst axios = require(\"axios\").default;\n\nconst cookies = new Cookies();\n\nclass Admin extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.handleNotificationClick = position => {};\n\n    this.getRoutes = routes => {\n      return routes.map((prop, key) => {\n        if (prop.layout === \"/admin\") {\n          return /*#__PURE__*/React.createElement(Route, {\n            path: prop.layout + prop.path,\n            render: props => /*#__PURE__*/React.createElement(prop.component, Object.assign({}, props, {\n              handleClick: this.handleNotificationClick,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 15\n              }\n            })),\n            key: key,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 11\n            }\n          });\n        } else {\n          return null;\n        }\n      });\n    };\n\n    this.getBrandText = path => {\n      for (let i = 0; i < routes.length; i++) {\n        if (this.props.location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\n          return routes[i].name;\n        }\n      }\n\n      return \"Brand\";\n    };\n\n    this.handleImageClick = image => {\n      this.setState({\n        image: image\n      });\n    };\n\n    this.handleColorClick = color => {\n      this.setState({\n        color: color\n      });\n    };\n\n    this.handleHasImage = hasImage => {\n      this.setState({\n        hasImage: hasImage\n      });\n    };\n\n    this.handleFixedClick = () => {\n      if (this.state.fixedClasses === \"dropdown\") {\n        this.setState({\n          fixedClasses: \"dropdown show-dropdown open\"\n        });\n      } else {\n        this.setState({\n          fixedClasses: \"dropdown\"\n        });\n      }\n    };\n\n    this.hideSideBar = event => {\n      //console.log(document.body.classList);\n      if (event.target.classList[0] != \"toggleButton\") {\n        document.body.classList.forEach(element => {\n          if (element == \"g-sidenav-pinned\") {\n            document.body.classList.remove('g-sidenav-pinned');\n          }\n        });\n      }\n    };\n\n    this.state = {\n      image: image,\n      color: \"black\",\n      hasImage: true,\n      fixedClasses: \"dropdown show-dropdown open\"\n    };\n  }\n\n  componentDidMount() {\n    document.body.classList.remove('g-sidenav-pinned');\n    var currentToken = cookies.get('canAuthToken');\n\n    if (!currentToken) {\n      window.location.href = \"../login/login\";\n      return;\n    }\n\n    document.body.classList.remove('bg-default');\n  }\n\n  componentDidUpdate(e) {\n    if (window.innerWidth < 993) {// document.documentElement.classList.toggle(\"nav-opens\");\n    } else {}\n\n    document.body.classList.remove('bg-default');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Sidebar, Object.assign({}, this.props, {\n      routes: routes,\n      image: this.state.image,\n      hasImage: this.state.hasImage,\n      sidebarStyle: style.sideBarStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-content\",\n      ref: \"mainContent\",\n      id: \"panel\",\n      onClick: this.hideSideBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AdminNavbar, Object.assign({}, this.props, {\n      brandText: this.getBrandText(this.props.location.pathname),\n      userImage: userImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Switch, {\n      onChange: this.hideSideBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, this.getRoutes(routes), \"  \", /*#__PURE__*/React.createElement(Redirect, {\n      from: \"*\",\n      to: \"/admin/index\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 73\n      }\n    })), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(AdminFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default Admin;\n/* <Footer /> <div className=\"wrapper \" class=\"\" id=\"panel\">\n        <NotificationSystem ref=\"notificationSystem\" style={style} />\n        <Sidebar {...this.props} routes={routes} image={this.state.image}\n        hasImage={this.state.hasImage}/>\n        <div id=\"panel\" className=\"main-panel main-content\" ref=\"mainPanel\">\n          <AdminNavbar\n            {...this.props}\n            brandText={this.getBrandText(this.props.location.pathname)}\n          />\n          <Switch>{this.getRoutes(routes)}</Switch>\n          <Footer />\n        </div>\n      </div>*/\n\n/*\n   &&\n     e.history.location.pathname !== e.location.pathname &&\n     document.documentElement.className.indexOf(\"nav-open\") !== -1\n   \n      \n   if (e.history.action === \"PUSH\") {\n     document.documentElement.scrollTop = 0;\n     document.scrollingElement.scrollTop = 0;\n     this.refs.mainPanel.scrollTop = 0;\n   }*/\n//if(document.body.classList == \"g-sidenav-show g-sidenav-pinned\")\n//document.body.classList.remove('g-sidenav-pinned');","map":{"version":3,"sources":["C:/MyFiles/Lboot_successhires_old_versions/successhires_servercode/src/layouts/Admin.jsx"],"names":["React","Component","Route","Switch","Redirect","NotificationSystem","AdminNavbar","Footer","Sidebar","style","routes","Cookies","userImage","browserHistory","AdminFooter","image","Container","axios","require","default","cookies","Admin","constructor","props","handleNotificationClick","position","getRoutes","map","prop","key","layout","path","getBrandText","i","length","location","pathname","indexOf","name","handleImageClick","setState","handleColorClick","color","handleHasImage","hasImage","handleFixedClick","state","fixedClasses","hideSideBar","event","target","classList","document","body","forEach","element","remove","componentDidMount","currentToken","get","window","href","componentDidUpdate","e","innerWidth","render","sideBarStyle"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Route, Switch,Redirect } from \"react-router-dom\";\nimport NotificationSystem from \"react-notification-system\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\nimport Footer from \"components/Footer/Footer\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport {style} from \"variables/Variables.jsx\";\nimport routes from \"routes.js\";\nimport Cookies from 'universal-cookie';\nimport userImage from \"assets/img/brand/blue.png\"; \nimport { browserHistory } from 'react-router';\nimport AdminFooter from \"components/Footer/Footer.jsx\";\nimport image from \"assets/img/brand/blue.png\"; \nimport { Container } from \"reactstrap\";\n\nconst axios = require(\"axios\").default;\nconst cookies = new Cookies();\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image: image,\n      color: \"black\",\n      hasImage: true,\n      fixedClasses: \"dropdown show-dropdown open\"\n    };\n  }\n  handleNotificationClick = position => {\n  };\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            render={props => (\n              <prop.component\n                {...props}\n                handleClick={this.handleNotificationClick}\n              />\n            )}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  getBrandText = path => {\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        this.props.location.pathname.indexOf(\n          routes[i].layout + routes[i].path\n        ) !== -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n  handleImageClick = image => {\n    this.setState({ image: image });\n  };\n  handleColorClick = color => {\n    this.setState({ color: color });\n  };\n  handleHasImage = hasImage => {\n    this.setState({ hasImage: hasImage });\n  };\n  handleFixedClick = () => {\n    if (this.state.fixedClasses === \"dropdown\") {\n      this.setState({ fixedClasses: \"dropdown show-dropdown open\" });\n    } else {\n      this.setState({ fixedClasses: \"dropdown\" });\n    }\n  };\n  componentDidMount() {\n    document.body.classList.remove('g-sidenav-pinned');\n    var currentToken = cookies.get('canAuthToken');\n    if(!currentToken){\n       window.location.href=\"../login/login\"; \n       return;\n      }\n      document.body.classList.remove('bg-default');\n  }\n\n  componentDidUpdate(e) {\n    if (\n      window.innerWidth < 993 ) {\n     // document.documentElement.classList.toggle(\"nav-opens\");\n    }else{\n    \n    }\n    document.body.classList.remove('bg-default');\n   \n  }\n  hideSideBar = (event) =>{\n//console.log(document.body.classList);\n\nif(event.target.classList[0] != \"toggleButton\")\n{\ndocument.body.classList.forEach(element => {\n    if(element == \"g-sidenav-pinned\"){\n      document.body.classList.remove('g-sidenav-pinned');\n    }\n});\n}\n  }\n  render() {\n    return (\n      <>\n        <Sidebar {...this.props} routes={routes} image={this.state.image}\n        hasImage={this.state.hasImage} sidebarStyle={style.sideBarStyle}/>\n        <div className=\"main-content\"  ref=\"mainContent\" id=\"panel\" onClick={this.hideSideBar}>\n          <AdminNavbar\n            {...this.props}\n            brandText={this.getBrandText(this.props.location.pathname)} userImage={userImage}\n          />\n          <Switch onChange={this.hideSideBar}>{this.getRoutes(routes)}  <Redirect from=\"*\" to=\"/admin/index\" /></Switch>\n          <Container fluid>\n            <AdminFooter />\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Admin;\n/* <Footer /> <div className=\"wrapper \" class=\"\" id=\"panel\">\n        <NotificationSystem ref=\"notificationSystem\" style={style} />\n        <Sidebar {...this.props} routes={routes} image={this.state.image}\n        hasImage={this.state.hasImage}/>\n        <div id=\"panel\" className=\"main-panel main-content\" ref=\"mainPanel\">\n          <AdminNavbar\n            {...this.props}\n            brandText={this.getBrandText(this.props.location.pathname)}\n          />\n          <Switch>{this.getRoutes(routes)}</Switch>\n          <Footer />\n        </div>\n      </div>*/\n /*\n    &&\n      e.history.location.pathname !== e.location.pathname &&\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\n    \n\n      \n    if (e.history.action === \"PUSH\") {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainPanel.scrollTop = 0;\n    }*///if(document.body.classList == \"g-sidenav-show g-sidenav-pinned\")\n    //document.body.classList.remove('g-sidenav-pinned');"]},"metadata":{},"sourceType":"module"}